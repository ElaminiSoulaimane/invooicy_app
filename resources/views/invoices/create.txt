<!-- resources/views/invoices/create.blade.php -->
<x-app-layout>
    <x-slot name="header">
        <h2 class="text-xl font-semibold leading-tight text-gray-800">
            Create New Invoice
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="mx-auto max-w-7xl sm:px-6 lg:px-8">
            <div class="overflow-hidden bg-white shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <form action="{{ route('invoices.store') }}" method="POST" id="invoiceForm">
                        @csrf

                        <div class="mb-4">
                            <label for="client_id" class="block text-sm font-medium text-gray-700">Client</label>
                            <select name="client_id" id="client_id"
                                class="mt-1 block w-full  rounded-[26px] border-gray-300 shadow-sm focus:border-perf-green  focus:ring-perf-green ">
                                <option value="">Select Client</option>
                                @foreach ($clients as $client)
                                    <option value="{{ $client->id }}">{{ $client->name }}</option>
                                @endforeach
                            </select>
                        </div>

                        <div id="itemsContainer">
                            <!-- Items will be added here dynamically -->
                        </div>

                        <div class="mt-4 grid grid-cols-3 gap-4">
                            <div>
                                <label for="subtotal" class="block text-sm font-medium text-gray-700">Subtotal</label>
                                <p id="subtotal" class="mt-1 text-lg font-bold">$0.00</p>
                            </div>
                            <div>
                                <label for="discount" class="block text-sm font-medium text-gray-700">Discount
                                    Amount</label>
                                <input type="number" name="discount_amount" id="discount_amount" min="0"
                                    value="0" step="0.01"
                                    class="mt-1 block w-full  rounded-[26px] border-gray-300 shadow-sm focus:border-perf-green focus:ring-perf-green"
                                    oninput="calculateTotal()">
                            </div>
                            <div>
                                <label for="totalAfterDiscount" class="block text-sm font-medium text-gray-700">Total
                                    After Discount</label>
                                <p id="totalAfterDiscount" class="mt-1 text-lg font-bold">$0.00</p>
                            </div>
                        </div>
                        <div class="mt-4">
                            <button type="button" onclick="addProductRow()"
                                class="px-4 py-2 text-sm font-medium text-white bg-blue-600  rounded-[26px] hover:bg-blue-700">
                                Add Product
                            </button>
                            <button type="button" onclick="addServiceRow()"
                                class="px-4 py-2 text-sm font-medium text-white bg-green-600  rounded-[26px] hover:bg-green-700">
                                Add Service
                            </button>
                        </div>

                        <div class="mt-6">
                            <button type="submit"
                                class="px-4 py-2 text-sm font-medium text-white bg-perf-green  rounded-[26px] hover:bg-perf-green">
                                Create Invoice
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
        let rowCount = 0;
        let items = [];

        function addProductRow() {
            const container = document.getElementById('itemsContainer');
            const row = document.createElement('div');
            row.classList.add('mb-4', 'p-4', 'border', 'rounded');
            row.innerHTML = `
                <input type="hidden" name="items[${rowCount}][type]" value="product">
                <div class="grid grid-cols-3 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Product</label>
                        <select name="items[${rowCount}][id]" onchange="updateQuantityMax(this)" class="mt-1 block w-full  rounded-[26px] border-gray-300 shadow-sm focus:border-perf-green focus:ring-perf-green ">
                            <option value="">Select Product</option>
                            @foreach ($products as $product)
                                <option value="{{ $product->id }}" data-quantity="{{ $product->quantity }}">{{ $product->name }} - ${{ $product->price }} (Stock: {{ $product->quantity }})</option>
                            @endforeach
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Quantity</label>
                        <input type="number" name="items[${rowCount}][quantity]" class="mt-1 block w-full  rounded-[26px] border-gray-300 shadow-sm focus:border-perf-green focus:ring-perf-green " min="1" value="1" max="1" oninput="validateQuantity(this)">
                        <p class="mt-1 text-sm text-red-600 hidden"></p>
                    </div>
                    <div>
                        <button type="button" onclick="this.parentElement.parentElement.parentElement.remove()" class="mt-6 px-4 py-2 text-sm font-medium text-white bg-red-600  rounded-[26px] hover:bg-red-700">
                            Remove
                        </button>
                    </div>
                </div>
            `;
            container.appendChild(row);
            rowCount++;
        }

        function addServiceRow() {
            const container = document.getElementById('itemsContainer');
            const row = document.createElement('div');
            row.classList.add('mb-4', 'p-4', 'border', 'rounded');
            row.innerHTML = `
                <input type="hidden" name="items[${rowCount}][type]" value="service">
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Service</label>
                        <select name="items[${rowCount}][id]" class="mt-1 block w-full  rounded-[26px] border-gray-300 shadow-sm focus:border-perf-green focus:ring-perf-green ">
                            <option value="">Select Service</option>
                            @foreach ($services as $service)
                                <option value="{{ $service->id }}">{{ $service->name }} - ${{ $service->price }}</option>
                            @endforeach
                        </select>
                    </div>
                    <div>
                        <button type="button" onclick="this.parentElement.parentElement.parentElement.remove()" class="mt-6 px-4 py-2 text-sm font-medium text-white bg-red-600  rounded-[26px] hover:bg-red-700">
                            Remove
                        </button>
                    </div>
                </div>
            `;
            container.appendChild(row);
            rowCount++;
        }

        function updateQuantityMax(selectElement) {
            const selectedOption = selectElement.options[selectElement.selectedIndex];
            const stockQuantity = selectedOption.getAttribute('data-quantity');
            const quantityInput = selectElement.closest('div').nextElementSibling.querySelector('input[type="number"]');
            const messageElement = quantityInput.nextElementSibling;

            quantityInput.max = stockQuantity;
            quantityInput.value = 1; // Reset quantity to 1 when product changes
            messageElement.classList.add('hidden');
            messageElement.textContent = '';
        }

        function validateQuantity(inputElement) {
            const maxQuantity = parseInt(inputElement.max);
            const currentQuantity = parseInt(inputElement.value);
            const messageElement = inputElement.nextElementSibling;

            if (currentQuantity > maxQuantity) {
                messageElement.textContent = `Insufficient stock! Only ${maxQuantity} available.`;
                messageElement.classList.remove('hidden');
                inputElement.value = maxQuantity;
            } else {
                messageElement.classList.add('hidden');
                messageElement.textContent = '';
            }
            calculateTotal();
        }

        function calculateTotal() {
    let subtotal = 0;
    const rows = document.querySelectorAll('#itemsContainer > div');
    rows.forEach(row => {
        const type = row.querySelector('input[type="hidden"]').value;
        const select = row.querySelector('select');
        const selectedOption = select.options[select.selectedIndex];
        let price = 0;
        let quantity = 1;

        if (selectedOption) {
            price = parseFloat(selectedOption.textContent.match(/\$(\d+(\.\d{1,2})?)/)[1]) || 0;
        }

        if (type === 'product') {
            quantity = parseInt(row.querySelector('input[type="number"]').value) || 0;
        }

        subtotal += quantity * price;
    });

    document.getElementById('subtotal').textContent = `$${subtotal.toFixed(2)}`;

    const discountAmount = parseFloat(document.getElementById('discount_amount').value) || 0;
    const totalAfterDiscount = Math.max(subtotal - discountAmount, 0);

    document.getElementById('totalAfterDiscount').textContent = `$${totalAfterDiscount.toFixed(2)}`;
}

document.getElementById('itemsContainer').addEventListener('change', calculateTotal);
document.getElementById('discount_amount').addEventListener('input', calculateTotal);
    </script>

</x-app-layout>

















<!-- resources/views/invoices/create.blade.php -->
<x-app-layout>
    <x-slot name="header">
        <h2 class="text-xl font-semibold leading-tight text-gray-800">
            Create New Invoice
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="mx-auto max-w-7xl sm:px-6 lg:px-8">
            <div class="overflow-hidden bg-white shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <form action="{{ route('invoices.store') }}" method="POST" id="invoiceForm">
                        @csrf

                        <div class="mb-4">
                            <label for="client_search" class="block text-sm font-medium text-gray-700">Client</label>
                            <div class="mt-1 relative">
                                <input type="text" id="client_search"
                                    class="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-perf-green focus:border-perf-green sm:text-sm  rounded-[26px] "
                                    placeholder="Search or select client...">
                                <select name="client_id" id="client_id" class="hidden">
                                    <option value="">Select Client</option>
                                    @foreach ($clients as $client)
                                        <option value="{{ $client->id }}">{{ $client->name }}</option>
                                    @endforeach
                                </select>
                                <button type="button"
                                    class="absolute inset-y-0 right-0 flex items-center px-2 text-gray-400 hover:text-gray-500">
                                    <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd"
                                            d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                                            clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                            <div id="client_list"
                                class="absolute z-10 w-full mt-1 bg-white border border-gray-300  rounded-[26px] shadow-lg hidden">
                            </div>
                        </div>

                        <div id="itemsContainer">
                            <!-- Items will be added here dynamically -->
                        </div>

                        <div class="mt-4 grid grid-cols-3 gap-4">
                            <div>
                                <label for="subtotal" class="block text-sm font-medium text-gray-700">Subtotal</label>
                                <p id="subtotal" class="mt-1 text-lg font-bold">$0.00</p>
                            </div>
                            <div>
                                <label for="discount" class="block text-sm font-medium text-gray-700">Discount
                                    Amount</label>
                                <input type="number" name="discount_amount" id="discount_amount" min="0"
                                    value="0" step="0.01"
                                    class="mt-1 block w-full  rounded-[26px] border-gray-300 shadow-sm focus:border-perf-green focus:ring-perf-green"
                                    oninput="calculateTotal()">
                            </div>
                            <div>
                                <label for="totalAfterDiscount" class="block text-sm font-medium text-gray-700">Total
                                    After Discount</label>
                                <p id="totalAfterDiscount" class="mt-1 text-lg font-bold">$0.00</p>
                            </div>
                        </div>
                        <div class="mt-4">
                            <button type="button" onclick="addItemRow('product')"
                                class="px-4 py-2 text-sm font-medium text-white bg-blue-600  rounded-[26px] hover:bg-blue-700">
                                Add Product
                            </button>
                            <button type="button" onclick="addItemRow('service')"
                                class="px-4 py-2 text-sm font-medium text-white bg-green-600  rounded-[26px] hover:bg-green-700">
                                Add Service
                            </button>
                        </div>

                        <div class="mt-6">
                            <button type="submit"
                                class="px-4 py-2 text-sm font-medium text-white bg-perf-green  rounded-[26px] hover:bg-perf-green">
                                Create Invoice
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
        let rowCount = 0;

        function addItemRow(type) {
            const container = document.getElementById('itemsContainer');
            const row = document.createElement('div');
            row.classList.add('mb-4', 'p-4', 'border', 'rounded');
            row.innerHTML = `
                <div class="grid grid-cols-3 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">${type === 'product' ? 'Product' : 'Service'}</label>
                        <div class="mt-1 relative">
                            <input type="text" class="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-perf-green focus:border-perf-green sm:text-sm  rounded-[26px] ${type}-search" placeholder="Search ${type}...">
                            <select name="items[${rowCount}][id]" class="hidden ${type}-select">
                                <option value="">Select ${type === 'product' ? 'Product' : 'Service'}</option>
                                ${type === 'product' ?
                                    '@foreach ($products as $product)<option value="{{ $product->id }}" data-quantity="{{ $product->quantity }}" data-price="{{ $product->price }}">{{ $product->name }}</option>@endforeach' :
                                    '@foreach ($services as $service)<option value="{{ $service->id }}" data-price="{{ $service->price }}">{{ $service->name }}</option>@endforeach'
                                }
                            </select>
                            <button type="button" class="absolute inset-y-0 right-0 flex items-center px-2 text-gray-400 hover:text-gray-500">
                                <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                                </svg>
                            </button>
                        </div>
                        <div class="${type}-list absolute z-10 w-full mt-1 bg-white border border-gray-300  rounded-[26px] shadow-lg hidden"></div>
                    </div>
                    ${type === 'product' ? `
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Quantity</label>
                            <input type="number" name="items[${rowCount}][quantity]" class="mt-1 block w-full  rounded-[26px] border-gray-300 shadow-sm focus:border-perf-green focus:ring-perf-green" min="1" value="1" max="1" oninput="validateQuantity(this)">
                            <p class="mt-1 text-sm text-red-600 hidden"></p>
                        </div>
                        ` : ''}
                    <div>
                        <button type="button" onclick="this.closest('.mb-4').remove(); calculateTotal();" class="mt-6 px-4 py-2 text-sm font-medium text-white bg-red-600  rounded-[26px] hover:bg-red-700">
                            Remove
                        </button>
                    </div>
                </div>
            `;
            container.appendChild(row);
            initItemSearch(row.querySelector(`.${type}-select`), row.querySelector(`.${type}-search`), row.querySelector(
                `.${type}-list`), type);
            rowCount++;
        }

        function initSearch(selectElement, inputElement, listElement) {
            const options = Array.from(selectElement.options).slice(1); // Exclude the first 'Select' option

            function showAllOptions() {
                listElement.innerHTML = '';
                options.forEach(option => {
                    const div = createOptionElement(option);
                    listElement.appendChild(div);
                });
                listElement.classList.remove('hidden');
            }

            function filterOptions(filter) {
                const filteredOptions = options.filter(option =>
                    option.text.toLowerCase().includes(filter.toLowerCase())
                );
                listElement.innerHTML = '';
                filteredOptions.forEach(option => {
                    const div = createOptionElement(option);
                    listElement.appendChild(div);
                });
                listElement.classList.toggle('hidden', filteredOptions.length === 0);
            }

            function createOptionElement(option) {
                const div = document.createElement('div');
                div.textContent = option.text;
                div.classList.add('p-2', 'hover:bg-gray-100', 'cursor-pointer');
                div.onclick = function() {
                    inputElement.value = option.text;
                    selectElement.value = option.value;
                    listElement.classList.add('hidden');
                    selectElement.dispatchEvent(new Event('change'));
                };
                return div;
            }

            inputElement.addEventListener('focus', showAllOptions);

            inputElement.addEventListener('input', function() {
                if (this.value.length > 0) {
                    filterOptions(this.value);
                } else {
                    showAllOptions();
                }
            });

            document.addEventListener('click', function(e) {
                if (!inputElement.contains(e.target) && !listElement.contains(e.target)) {
                    listElement.classList.add('hidden');
                }
            });

            selectElement.addEventListener('change', function() {
                const selectedOption = this.options[this.selectedIndex];
                if (selectedOption) {
                    inputElement.value = selectedOption.text;
                    if (this.classList.contains('product-select')) {
                        const quantityInput = this.closest('.grid').querySelector('input[type="number"]');
                        const maxQuantity = selectedOption.getAttribute('data-quantity');
                        quantityInput.max = maxQuantity;
                        quantityInput.value = 1;
                    }
                    calculateTotal();
                }
            });
        }

        function initItemSearch(selectElement, inputElement, listElement, type) {
            const options = Array.from(selectElement.options).slice(1); // Exclude the first 'Select' option

            function showAllOptions() {
                listElement.innerHTML = '';
                options.forEach(option => {
                    const div = createOptionElement(option);
                    listElement.appendChild(div);
                });
                listElement.classList.remove('hidden');
            }

            function filterOptions(filter) {
                const filteredOptions = options.filter(option =>
                    option.text.toLowerCase().includes(filter.toLowerCase())
                );
                listElement.innerHTML = '';
                filteredOptions.forEach(option => {
                    const div = createOptionElement(option);
                    listElement.appendChild(div);
                });
                listElement.classList.toggle('hidden', filteredOptions.length === 0);
            }

            function createOptionElement(option) {
                const div = document.createElement('div');
                div.textContent = `${option.text} - $${option.getAttribute('data-price')}`;
                if (type === 'product') {
                    div.textContent += ` (Stock: ${option.getAttribute('data-quantity')})`;
                }
                div.classList.add('p-2', 'hover:bg-gray-100', 'cursor-pointer');
                div.onclick = function() {
                    inputElement.value = option.text;
                    selectElement.value = option.value;
                    listElement.classList.add('hidden');
                    selectElement.dispatchEvent(new Event('change'));
                };
                return div;
            }

            inputElement.addEventListener('focus', showAllOptions);

            inputElement.addEventListener('input', function() {
                if (this.value.length > 0) {
                    filterOptions(this.value);
                } else {
                    showAllOptions();
                }
            });

            document.addEventListener('click', function(e) {
                if (!inputElement.contains(e.target) && !listElement.contains(e.target)) {
                    listElement.classList.add('hidden');
                }
            });

            selectElement.addEventListener('change', function() {
                const selectedOption = this.options[this.selectedIndex];
                if (selectedOption) {
                    inputElement.value = selectedOption.text;
                    if (type === 'product') {
                        const quantityInput = this.closest('.grid').querySelector('input[type="number"]');
                        const maxQuantity = selectedOption.getAttribute('data-quantity');
                        quantityInput.max = maxQuantity;
                        quantityInput.value = 1;
                    }
                    calculateTotal();
                }
            });
        }

        function validateQuantity(inputElement) {
            const maxQuantity = parseInt(inputElement.max);
            const currentQuantity = parseInt(inputElement.value);
            const messageElement = inputElement.nextElementSibling;

            if (currentQuantity > maxQuantity) {
                messageElement.textContent = `Insufficient stock! Only ${maxQuantity} available.`;
                messageElement.classList.remove('hidden');
                inputElement.value = maxQuantity;
            } else {
                messageElement.classList.add('hidden');
                messageElement.textContent = '';
            }
            calculateTotal();
        }


        function calculateTotal() {
            let subtotal = 0;
            const rows = document.querySelectorAll('#itemsContainer > div');
            rows.forEach(row => {
                const select = row.querySelector('select');
                const selectedOption = select.options[select.selectedIndex];
                let price = 0;
                let quantity = 1;

                if (selectedOption) {
                    price = parseFloat(selectedOption.getAttribute('data-price')) || 0;
                }

                if (select.classList.contains('product-select')) {
                    quantity = parseInt(row.querySelector('input[type="number"]').value) || 0;
                }

                subtotal += quantity * price;
            });

            document.getElementById('subtotal').textContent = `$${subtotal.toFixed(2)}`;

            const discountAmount = parseFloat(document.getElementById('discount_amount').value) || 0;
            const totalAfterDiscount = Math.max(subtotal - discountAmount, 0);

            document.getElementById('totalAfterDiscount').textContent = `$${totalAfterDiscount.toFixed(2)}`;
        }

        document.addEventListener('DOMContentLoaded', function() {
            const clientSelect = document.getElementById('client_id');
            const clientSearch = document.getElementById('client_search');
            const clientList = document.getElementById('client_list');

            initSearch(clientSelect, clientSearch, clientList);

            document.getElementById('itemsContainer').addEventListener('change', calculateTotal);
            document.getElementById('discount_amount').addEventListener('input', calculateTotal);
        });
    </script>
</x-app-layout>
